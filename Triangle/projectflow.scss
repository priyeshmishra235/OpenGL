Entry Point
main()
├── mainWindow.initialize()
│   └── Window::initialize()
│       ├── glfwInit()
│       ├── glfwWindowHint()                  // OpenGL version + profile
│       ├── glfwCreateWindow()                → mainWindow (GLFWwindow*)
│       ├── glfwGetFramebufferSize()          → bufferWidth, bufferHeight
│       ├── glfwMakeContextCurrent()
│       ├── glewInit()
│       ├── glEnable(GL_DEPTH_TEST)
│       └── glViewport()
│
├── CreateObjects()                           // Creates and uploads geometry to GPU
│   ├── new Mesh()                            → obj1
│   ├── Mesh::CreateMesh(vertices, indices)
│   │   ├── glGenVertexArrays()
│   │   ├── glBindVertexArray()
│   │   ├── glGenBuffers() for IBO & VBO
│   │   ├── glBindBuffer(GL_ELEMENT_ARRAY_BUFFER)
│   │   ├── glBufferData(GL_ELEMENT_ARRAY_BUFFER)
│   │   ├── glBindBuffer(GL_ARRAY_BUFFER)
│   │   ├── glBufferData(GL_ARRAY_BUFFER)
│   │   ├── glVertexAttribPointer()
│   │   ├── glEnableVertexAttribArray()
│   │   ├── glBindBuffer(GL_ARRAY_BUFFER, 0)
│   │   ├── glBindVertexArray(0)
│   │   └── glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, 0)
│   ├── meshList.push_back(obj1)
│   ├── Repeat same for obj2
│   └── meshList.push_back(obj2)
│
├── CreateShaders()                           // Loads, compiles, links shaders
│   ├── new Shader()                          → shader1
│   ├── Shader::CreateFromFiles(vShader, fShader)
│   │   ├── Shader::readShaderCodeFromFile(vShader)
│   │   │   ├── std::ifstream.open()
│   │   │   ├── std::stringstream << rdbuf()
│   │   │   └── shaderFile.close()
│   │   ├── Shader::readShaderCodeFromFile(fShader) // same process
│   │   └── Shader::compileShaders(vShaderCode, fShaderCode)
│   │       ├── glCreateProgram()
│   │       ├── Shader::addShader(vShaderCode, GL_VERTEX_SHADER)
│   │       │   ├── glCreateShader()
│   │       │   ├── glShaderSource()
│   │       │   ├── glCompileShader()
│   │       │   ├── glGetShaderiv() + log
│   │       │   └── glAttachShader()
│   │       ├── Shader::addShader(fShaderCode, GL_FRAGMENT_SHADER) // same
│   │       ├── glLinkProgram()
│   │       ├── glValidateProgram()
│   │       ├── glGetUniformLocation("model")      → uniformModel
│   │       └── glGetUniformLocation("projection") → uniformProjection
│   └── shaderList.push_back(*shader1)

Per-Frame Render
while (!mainWindow.getShouldClose())
├── glfwPollEvents()
├── glClearColor(0,0,0,1)
├── glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT)
│
├── shaderList[0].UseShader()                 → glUseProgram(programID)
├── uniformModel = GetModelLocation()
├── uniformProjection = GetProjectionLocation()
│
├── curAngle += 1.0                           // Rotate object every frame
│
├── Build model matrix (object 1):
│   ├── identity → translate (0,0,-2.5) → rotate (curAngle) → scale (0.4)
│   ├── glUniformMatrix4fv(uniformModel, ...)
│   ├── glUniformMatrix4fv(uniformProjection, ...)
│   └── meshList[0]->RenderMesh()
│       ├── glBindVertexArray()
│       ├── glBindBuffer(GL_ELEMENT_ARRAY_BUFFER)
│       ├── glDrawElements(GL_TRIANGLES, ...)
│       └── glBindVertexArray(0)
│
├── Build model matrix (object 2):
│   ├── identity → translate (0,1,-2.5) → scale (0.4)
│   ├── glUniformMatrix4fv(uniformModel, ...)
│   ├── glUniformMatrix4fv(uniformProjection, ...)
│   └── meshList[1]->RenderMesh()
│       └── same as above
│
├── glUseProgram(0)                           // Optional unbind
└── mainWindow.swapBuffers()                 → glfwSwapBuffers()

Shader Pipeline flow
GLSL Vertex Shader (shader.vert)
├── layout(location=0) in vec3 pos
├── out vec4 vCol
├── uniform mat4 model, projection
├── gl_Position = projection * model * vec4(pos, 1.0)
└── vCol = vec4(clamp(pos, 0.0f, 1.0f), 1.0f)

GLSL Fragment Shader (shader.frag)
├── in vec4 vCol
└── out vec4 colour = vCol

On Application Exit
~Window()
└── glfwDestroyWindow()
└── glfwTerminate()
